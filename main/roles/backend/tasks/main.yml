---
- name: install packages
  ansible.builtin.package:
    update_cache: true
    name: "{{ item }}"
    state: latest
  with_items:
    - git
    - zip
    - unzip
    - python3-full
    - mysql-client
    - libmysqlclient-dev
    - pkg-config
    - python3-mysqldb
    - python3-pip
    - default-libmysqlclient-dev

- name: rm git repo if exists
  ansible.builtin.shell:
    rm -rf /home/backend/app

- name: Setup user on backend
  user:
    name: "{{ app_user}}"


- name: Clone git repository backend
  git:
    repo: https://github.com/timoguic/acit4640-py-mysql.git
    dest: /home/backend/app


- name: Install requirements
  ansible.builtin.pip: 
    requirements: /home/backend/app/backend/requirements.txt
    virtualenv: /home/backend/venv
    virtualenv_command: python3 -m venv
  become: yes
- name: Remove backend.conf
  ansible.builtin.shell: |
    rm -f /home/backend/app/backend/backend.conf
- name: Replace backend.conf
  template:
    src: ./templates/backend.conf
    dest: /home/backend/app/backend/backend.conf
    owner: backend
    group: backend
    mode: '0777'

- name: Remove .my.cnfs
  become: yes
  ansible.builtin.shell: |
    rm -f /root/.my.cnf
    rm -f /home/backend/.my.cnf
    rm -f /home/ubuntu/.my.cnf
- name: Replace .my.cnf 1
  become: yes
  template:
    src: my.cnf
    dest: /root/.my.cnf
    owner: root
    group: root
    mode: '0644'
- name: Replace .my.cnf 2
  become: yes
  template:
    src: my.cnf
    dest: /home/ubuntu/.my.cnf
    owner: ubuntu
    group: ubuntu
    mode: '0644'
- name: Replace .my.cnf 2
  become: yes
  template:
    src: my.cnf
    dest: /home/backend/.my.cnf
    owner: backend
    group: backend
    mode: '0644'


- name: Setup system service file
  template:
    src: ./templates/app.service
    dest: /usr/lib/systemd/system/app.service
    owner: backend
    group: backend
    mode: '0777'
  vars:
    ansible_python_interpreter: /usr/bin/python3
- name: Change ownership to backend user.
  ansible.builtin.shell: |
    chown -R backend:backend /home/backend/
    chmod -R 777 /home/backend

- name: Test echo
  ansible.builtin.debug:
    msg: "Db: user{{ db_user }}"
    msg: "Db pass: {{ db_pass }}"
    msg: "App user: {{ app_user }}"
    msg: "App pass: {{ app_pass }}"
    msg: "Host: {{ app_host }}"
    msg: "Logging into db with {{db_user}}:{{db_pass}}@{{app_host}}"

- name: Create new database with name 'app'
  community.mysql.mysql_db:
    login_user: "{{ db_user }}"
    login_password: "{{ db_pass }}"
    login_host: "{{ app_host }}"
    name: app
    state: present

- name: Create application user
  community.mysql.mysql_user:
    login_user: "{{ db_user }}"
    login_password: "{{ db_pass }}"
    login_host: "{{ app_host }}"
    host: '%'
    name: "{{ app_user }}"
    password: "{{ app_pass }}"
    priv: "app.*:ALL,GRANT"
    state: present
  
- name: Insert data into item table
  community.mysql.mysql_query:
    login_user: "{{ app_user }}"
    login_password: "{{ app_pass }}"
    login_host: "{{ app_host }}"
    login_db: app
    query:
    - CREATE TABLE IF NOT EXISTS item (name varchar(30) NOT NULL, bcit_id varchar(10) NOT NULL, PRIMARY KEY (bcit_id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;;
    - DELETE FROM app.item WHERE name = "peter vanderhook";
    - INSERT INTO app.item (name, bcit_id) VALUES ('peter vanderhook', 'A00984094');

- name: Restart and enable app service
  service:
    name: app
    state: restarted
    enabled: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

